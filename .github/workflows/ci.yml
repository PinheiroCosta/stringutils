name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  lint-typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Poetry check
        run: poetry check

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Lint (flake8)
        run: poetry run flake8 .

      - name: Type check (mypy)
        run: poetry run mypy .

  unit-tests:
    runs-on: ubuntu-latest
    needs: lint-typecheck
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run tests
        run: poetry run pytest

  version-check:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          version=$(grep '^version =' pyproject.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check tag matches version
        run: |
          tag="${GITHUB_REF##*/v}"
          project_version="${{ steps.get_version.outputs.version }}"
          echo "Tag: $tag | pyproject.toml version: $project_version"
          if [ "$tag" != "$project_version" ]; then
            echo "‚ùå Version mismatch: tag is $tag but pyproject.toml has $project_version"
            exit 1
          fi

  docker-smoke-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image (again, for this job)
        run: docker build -t stringutils .

      - name: Run Docker container and smoke test
        run: |
          docker run -e PORT=5010 -d -p 5010:5010 --name stringutils_test stringutils
          for i in {1..10}; do
            curl -sf http://localhost:5010/docs && break
            echo "Aguardando app iniciar..."
            sleep 2
          done
          if ! curl -sf http://localhost:5010/docs; then
            docker logs stringutils_test
            exit 1
          fi
          docker stop stringutils_test
